# ===================================
# Pipeline CI/CD Corrigé - Bons Chemins
# Structure: services/auth-service/, etc.
# ===================================

name: 🚀 Docker CI/CD E-commerce

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  PROJECT_NAME: savita2618/e-commerce-vue

jobs:
  # ===================================
  # VALIDATION AVEC BONS CHEMINS
  # ===================================
  validate:
    name: 🔍 Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate Docker files
        run: |
          echo "🔍 Vérification de la structure du projet..."
          echo "Structure attendue:"
          echo "├── frontend/Dockerfile"
          echo "└── services/"
          echo "    ├── auth-service/Dockerfile"
          echo "    ├── product-service/Dockerfile"
          echo "    └── order-service/Dockerfile"
          echo ""
          
          # Vérifier la présence des Dockerfile avec les BONS chemins
          echo "🔍 Vérification des Dockerfile..."
          
          if [ ! -f "services/auth-service/Dockerfile" ]; then
            echo "❌ Dockerfile manquant: services/auth-service/Dockerfile"
            exit 1
          else
            echo "✅ services/auth-service/Dockerfile trouvé"
          fi
          
          if [ ! -f "services/product-service/Dockerfile" ]; then
            echo "❌ Dockerfile manquant: services/product-service/Dockerfile"
            exit 1
          else
            echo "✅ services/product-service/Dockerfile trouvé"
          fi
          
          if [ ! -f "services/order-service/Dockerfile" ]; then
            echo "❌ Dockerfile manquant: services/order-service/Dockerfile"
            exit 1
          else
            echo "✅ services/order-service/Dockerfile trouvé"
          fi
          
          if [ ! -f "frontend/Dockerfile" ]; then
            echo "❌ Dockerfile manquant: frontend/Dockerfile"
            exit 1
          else
            echo "✅ frontend/Dockerfile trouvé"
          fi
          
          echo ""
          echo "✅ Tous les Dockerfile sont présents aux bons emplacements !"
          
          # Vérifier les package.json aussi
          echo "🔍 Vérification des package.json..."
          
          test -f "services/auth-service/package.json" && echo "✅ services/auth-service/package.json" || echo "⚠️ services/auth-service/package.json manquant"
          test -f "services/product-service/package.json" && echo "✅ services/product-service/package.json" || echo "⚠️ services/product-service/package.json manquant"
          test -f "services/order-service/package.json" && echo "✅ services/order-service/package.json" || echo "⚠️ services/order-service/package.json manquant"
          test -f "frontend/package.json" && echo "✅ frontend/package.json" || echo "⚠️ frontend/package.json manquant"
          
          echo "✅ Validation terminée avec succès !"

  # ===================================
  # BUILD AVEC BONS CHEMINS
  # ===================================
  build:
    name: 🏗️ Build Images
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set environment variables
        run: |
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
          echo "IMAGE_TAG_LATEST=latest" >> $GITHUB_ENV
          echo "CI_REGISTRY_IMAGE=${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}" >> $GITHUB_ENV
          
      - name: Debug environment
        run: |
          echo "🔍 Variables d'environnement:"
          echo "CI_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE"
          echo "IMAGE_TAG: $IMAGE_TAG"
          echo "Branch: ${{ github.ref_name }}"
          echo "SHA: ${{ github.sha }}"
          
      - name: Build Auth Service
        run: |
          echo "🏗️ Construction de auth-service..."
          echo "Dockerfile: services/auth-service/Dockerfile"
          echo "Context: services/auth-service/"
          
          docker build \
            -t auth-service:$IMAGE_TAG \
            -t auth-service:$IMAGE_TAG_LATEST \
            -t $CI_REGISTRY_IMAGE/auth-service:$IMAGE_TAG \
            -t $CI_REGISTRY_IMAGE/auth-service:$IMAGE_TAG_LATEST \
            -f services/auth-service/Dockerfile \
            services/auth-service/
            
          echo "✅ auth-service construit avec succès"
          
      - name: Build Product Service
        run: |
          echo "🏗️ Construction de product-service..."
          echo "Dockerfile: services/product-service/Dockerfile"
          echo "Context: services/product-service/"
          
          docker build \
            -t product-service:$IMAGE_TAG \
            -t product-service:$IMAGE_TAG_LATEST \
            -t $CI_REGISTRY_IMAGE/product-service:$IMAGE_TAG \
            -t $CI_REGISTRY_IMAGE/product-service:$IMAGE_TAG_LATEST \
            -f services/product-service/Dockerfile \
            services/product-service/
            
          echo "✅ product-service construit avec succès"
          
      - name: Build Order Service
        run: |
          echo "🏗️ Construction de order-service..."
          echo "Dockerfile: services/order-service/Dockerfile"
          echo "Context: services/order-service/"
          
          docker build \
            -t order-service:$IMAGE_TAG \
            -t order-service:$IMAGE_TAG_LATEST \
            -t $CI_REGISTRY_IMAGE/order-service:$IMAGE_TAG \
            -t $CI_REGISTRY_IMAGE/order-service:$IMAGE_TAG_LATEST \
            -f services/order-service/Dockerfile \
            services/order-service/
            
          echo "✅ order-service construit avec succès"
          
      - name: Build Frontend
        run: |
          echo "🏗️ Construction du frontend..."
          echo "Dockerfile: frontend/Dockerfile"
          echo "Context: frontend/"
          
          docker build \
            -t frontend:$IMAGE_TAG \
            -t frontend:$IMAGE_TAG_LATEST \
            -t $CI_REGISTRY_IMAGE/frontend:$IMAGE_TAG \
            -t $CI_REGISTRY_IMAGE/frontend:$IMAGE_TAG_LATEST \
            -f frontend/Dockerfile \
            frontend/
            
          echo "✅ frontend construit avec succès"
          
      - name: Test Images
        run: |
          echo "🧪 Vérification des images construites..."
          
          # Lister toutes les images créées
          echo "📦 Images disponibles:"
          docker images | grep -E "(auth-service|product-service|order-service|frontend)"
          
          echo "✅ Toutes les images sont disponibles"
          
      - name: Push Images to Registry
        run: |
          echo "📤 Push des images vers le registry..."
          
          # Push avec SHA unique (version)
          docker push $CI_REGISTRY_IMAGE/auth-service:$IMAGE_TAG
          docker push $CI_REGISTRY_IMAGE/product-service:$IMAGE_TAG
          docker push $CI_REGISTRY_IMAGE/order-service:$IMAGE_TAG
          docker push $CI_REGISTRY_IMAGE/frontend:$IMAGE_TAG
          
          # Push avec tag latest
          docker push $CI_REGISTRY_IMAGE/auth-service:$IMAGE_TAG_LATEST
          docker push $CI_REGISTRY_IMAGE/product-service:$IMAGE_TAG_LATEST
          docker push $CI_REGISTRY_IMAGE/order-service:$IMAGE_TAG_LATEST
          docker push $CI_REGISTRY_IMAGE/frontend:$IMAGE_TAG_LATEST
          
          echo "✅ Toutes les images sont uploadées !"
          echo ""
          echo "📦 Images disponibles dans le registry:"
          echo "- $CI_REGISTRY_IMAGE/auth-service:$IMAGE_TAG"
          echo "- $CI_REGISTRY_IMAGE/product-service:$IMAGE_TAG"
          echo "- $CI_REGISTRY_IMAGE/order-service:$IMAGE_TAG"
          echo "- $CI_REGISTRY_IMAGE/frontend:$IMAGE_TAG"

# ===================================
# JOB SÉCURITÉ AVEC TRIVY
# ===================================

  security:
    name: 🔒 Scan de Sécurité
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set environment variables
        run: |
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
          echo "CI_REGISTRY_IMAGE=${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}" >> $GITHUB_ENV
          
      - name: Scan Auth Service avec Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/auth-service:${{ github.sha }}'
          format: 'table'
        continue-on-error: true
        
      - name: Scan Product Service avec Trivy  
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/product-service:${{ github.sha }}'
          format: 'table'
        continue-on-error: true
        
      - name: Scan Order Service avec Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/order-service:${{ github.sha }}'
          format: 'table'
        continue-on-error: true
        
      - name: Scan Frontend avec Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/frontend:${{ github.sha }}'
          format: 'table'
        continue-on-error: true
        
      - name: Résumé Sécurité
        run: |
          echo "🔒 Scan de sécurité terminé pour toutes les images"
          echo "📊 Consultez les logs ci-dessus pour les détails"
          echo "⚠️ Trivy analyse les vulnérabilités connues dans vos images"

  # ===================================
  # TESTS UNITAIRES AVEC BONS CHEMINS
  # ===================================
  test:
    name: 🧪 Tests Unitaires
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

          
      - name: Test Auth Service
        run: |
          echo "🧪 Tests du auth-service..."
          cd services/auth-service
          if [ -f "package.json" ]; then
            npm ci
            npm test || echo "⚠️ Tests auth-service échoués mais on continue"
          else
            echo "⚠️ Pas de package.json trouvé dans services/auth-service"
          fi
          cd ../..
          
      - name: Test Product Service
        run: |
          echo "🧪 Tests du product-service..."
          cd services/product-service
          if [ -f "package.json" ]; then
            npm ci
            npm test || echo "⚠️ Tests product-service échoués mais on continue"
          else
            echo "⚠️ Pas de package.json trouvé dans services/product-service"
          fi
          cd ../..
          
      - name: Test Order Service
        run: |
          echo "🧪 Tests du order-service..."
          cd services/order-service
          if [ -f "package.json" ]; then
            npm ci
            npm test || echo "⚠️ Tests order-service échoués mais on continue"
          else
            echo "⚠️ Pas de package.json trouvé dans services/order-service"
          fi
          cd ../..
          
      - name: Test Frontend
        run: |
          echo "🧪 Tests du frontend..."
          cd frontend
          if [ -f "package.json" ]; then
            npm ci
            npm run test:unit || npm test || echo "⚠️ Tests frontend échoués mais on continue"
          else
            echo "⚠️ Pas de package.json trouvé dans frontend"
          fi
          cd ..

# ===================================
# TESTS D'INTÉGRATION E-COMMERCE
# ===================================

  integration:
    name: 🔄 Tests d'Intégration Réels
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set environment variables
        run: |
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
          echo "CI_REGISTRY_IMAGE=${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}" >> $GITHUB_ENV
          
      - name: Pull and Tag Images
        run: |
          echo "📥 Récupération des images buildées..."
          
          # Pull les images avec SHA
          docker pull $CI_REGISTRY_IMAGE/auth-service:$IMAGE_TAG
          docker pull $CI_REGISTRY_IMAGE/product-service:$IMAGE_TAG
          docker pull $CI_REGISTRY_IMAGE/order-service:$IMAGE_TAG
          docker pull $CI_REGISTRY_IMAGE/frontend:$IMAGE_TAG
          
          # Tag pour utilisation locale
          docker tag $CI_REGISTRY_IMAGE/auth-service:$IMAGE_TAG auth-service:latest
          docker tag $CI_REGISTRY_IMAGE/product-service:$IMAGE_TAG product-service:latest
          docker tag $CI_REGISTRY_IMAGE/order-service:$IMAGE_TAG order-service:latest
          docker tag $CI_REGISTRY_IMAGE/frontend:$IMAGE_TAG frontend:latest
          
      - name: Create Test Environment
        run: |
          echo "🚀 Création de l'environnement de test complet..."
          
          # Créer docker-compose pour tests d'intégration
          cat > docker-compose.test.yml << 'EOF'
          version: '3.8'
          
          services:
            # MongoDB pour chaque service
            mongodb-auth:
              image: mongo:4.4
              container_name: mongodb-auth-test
              environment:
                MONGO_INITDB_ROOT_USERNAME: admin
                MONGO_INITDB_ROOT_PASSWORD: password123
              ports:
                - "27017:27017"
              healthcheck:
                test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
                interval: 10s
                timeout: 5s
                retries: 5
                
            mongodb-products:
              image: mongo:4.4
              container_name: mongodb-products-test
              environment:
                MONGO_INITDB_ROOT_USERNAME: admin
                MONGO_INITDB_ROOT_PASSWORD: password123
              ports:
                - "27018:27017"
              healthcheck:
                test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
                interval: 10s
                timeout: 5s
                retries: 5
                
            mongodb-orders:
              image: mongo:4.4
              container_name: mongodb-orders-test
              environment:
                MONGO_INITDB_ROOT_USERNAME: admin
                MONGO_INITDB_ROOT_PASSWORD: password123
              ports:
                - "27019:27017"
              healthcheck:
                test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
                interval: 10s
                timeout: 5s
                retries: 5
                
            # Auth Service
            auth-service:
              image: auth-service:latest
              container_name: auth-service-test
              ports:
                - "3001:3001"
              environment:
                - MONGODB_URI=mongodb://admin:password123@mongodb-auth:27017/authdb?authSource=admin
                - JWT_SECRET=test-secret-key-integration
                - NODE_ENV=test
                - PORT=3001
              depends_on:
                mongodb-auth:
                  condition: service_healthy
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3001/api/health", "||", "exit", "1"]
                interval: 15s
                timeout: 10s
                retries: 5
                
            # Product Service
            product-service:
              image: product-service:latest
              container_name: product-service-test
              ports:
                - "3002:3002"
              environment:
                - MONGODB_URI=mongodb://admin:password123@mongodb-products:27017/productsdb?authSource=admin
                - NODE_ENV=test
                - PORT=3002
              depends_on:
                mongodb-products:
                  condition: service_healthy
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3002/api/health", "||", "exit", "1"]
                interval: 15s
                timeout: 10s
                retries: 5
                
            # Order Service
            order-service:
              image: order-service:latest
              container_name: order-service-test
              ports:
                - "3003:3003"
              environment:
                - MONGODB_URI=mongodb://admin:password123@mongodb-orders:27017/ordersdb?authSource=admin
                - NODE_ENV=test
                - PORT=3003
              depends_on:
                mongodb-orders:
                  condition: service_healthy
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3003/api/health", "||", "exit", "1"]
                interval: 15s
                timeout: 10s
                retries: 5
                
            # Frontend
            frontend:
              image: frontend:latest
              container_name: frontend-test
              ports:
                - "3000:3000"
              environment:
                - VITE_API_AUTH_URL=http://localhost:3001
                - VITE_API_PRODUCT_URL=http://localhost:3002
                - VITE_API_ORDER_URL=http://localhost:3003
              depends_on:
                - auth-service
                - product-service
                - order-service
          EOF
          
      - name: Install Docker Compose
        run: |
          # Installer docker-compose
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
          
      - name: Start E-commerce Application
        run: |
          echo "🚀 Démarrage de l'application e-commerce complète..."
          docker-compose -f docker-compose.test.yml up -d
          
      - name: Wait for All Services
        run: |
          echo "⏳ Attente du démarrage de tous les services..."
          
          # Attendre 2 minutes max
          for i in {1..24}; do
            echo "Tentative $i/24 (5 secondes chacune)..."
            
            # Vérifier chaque service
            auth_ready=$(curl -s http://localhost:3001/api/health | grep -o "ok" || echo "not_ready")
            product_ready=$(curl -s http://localhost:3002/api/health | grep -o "ok" || echo "not_ready")
            order_ready=$(curl -s http://localhost:3003/api/health | grep -o "ok" || echo "not_ready")
            frontend_ready=$(curl -s http://localhost:3000/ | grep -o "html" || echo "not_ready")
            
            echo "Auth: $auth_ready | Product: $product_ready | Order: $order_ready | Frontend: $frontend_ready"
            
            if [ "$auth_ready" = "ok" ] && [ "$product_ready" = "ok" ] && [ "$order_ready" = "ok" ] && [ "$frontend_ready" = "html" ]; then
              echo "✅ Tous les services sont prêts !"
              break
            fi
            
            if [ $i -eq 24 ]; then
              echo "❌ Timeout - certains services ne répondent pas"
              docker-compose -f docker-compose.test.yml ps
              docker-compose -f docker-compose.test.yml logs
              exit 1
            fi
            
            sleep 5
          done
          
      - name: Run E-commerce Integration Tests
        run: |
          echo "🧪 Tests d'intégration de l'e-commerce..."
          
          # Test 1: Inscription utilisateur
          echo "=== Test 1: Inscription Utilisateur ==="
          REGISTER_RESPONSE=$(curl -s -X POST http://localhost:3001/api/auth/register \
            -H "Content-Type: application/json" \
            -d '{
              "name": "Test User",
              "email": "test@integration.com",
              "password": "password123"
            }')
          echo "Réponse inscription: $REGISTER_RESPONSE"
          
          # Test 2: Connexion utilisateur
          echo "=== Test 2: Connexion Utilisateur ==="
          LOGIN_RESPONSE=$(curl -s -X POST http://localhost:3001/api/auth/login \
            -H "Content-Type: application/json" \
            -d '{
              "email": "test@integration.com",
              "password": "password123"
            }')
          echo "Réponse connexion: $LOGIN_RESPONSE"
          
          # Extraire le token JWT (si possible)
          TOKEN=$(echo $LOGIN_RESPONSE | grep -o '"token":"[^"]*' | cut -d'"' -f4 || echo "")
          echo "Token JWT: ${TOKEN:0:50}..." # Afficher seulement les 50 premiers caractères
          
          # Test 3: Liste des produits
          echo "=== Test 3: Liste des Produits ==="
          PRODUCTS_RESPONSE=$(curl -s http://localhost:3002/api/products)
          echo "Réponse produits: $PRODUCTS_RESPONSE"
          
          # Test 4: Création d'un produit (si endpoint existe)
          echo "=== Test 4: Création d'un Produit ==="
          if [ -n "$TOKEN" ]; then
            CREATE_PRODUCT_RESPONSE=$(curl -s -X POST http://localhost:3002/api/products \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $TOKEN" \
              -d '{
                "name": "Produit Test",
                "price": 29.99,
                "description": "Produit créé lors des tests d'\''intégration"
              }')
            echo "Réponse création produit: $CREATE_PRODUCT_RESPONSE"
          else
            echo "⚠️ Pas de token, skip création produit"
          fi
          
          # Test 5: Liste des commandes
          echo "=== Test 5: Liste des Commandes ==="
          if [ -n "$TOKEN" ]; then
            ORDERS_RESPONSE=$(curl -s -H "Authorization: Bearer $TOKEN" http://localhost:3003/api/orders)
            echo "Réponse commandes: $ORDERS_RESPONSE"
          else
            echo "⚠️ Pas de token, skip commandes"
          fi
          
          # Test 6: Frontend accessibility
          echo "=== Test 6: Accessibilité Frontend ==="
          FRONTEND_CONTENT=$(curl -s http://localhost:3000/)
          if echo "$FRONTEND_CONTENT" | grep -q "html\|HTML"; then
            echo "✅ Frontend accessible et retourne du HTML"
          else
            echo "❌ Frontend ne retourne pas de HTML valide"
          fi
          
          echo "🎉 Tests d'intégration e-commerce terminés !"
          
      - name: Show Service Logs
        if: failure()
        run: |
          echo "📋 Logs des services en cas d'échec:"
          echo "=== Auth Service ==="
          docker-compose -f docker-compose.test.yml logs auth-service
          echo "=== Product Service ==="
          docker-compose -f docker-compose.test.yml logs product-service
          echo "=== Order Service ==="
          docker-compose -f docker-compose.test.yml logs order-service
          echo "=== Frontend ==="
          docker-compose -f docker-compose.test.yml logs frontend
          
      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Nettoyage de l'environnement de test..."
          docker-compose -f docker-compose.test.yml down -v --remove-orphans
          docker system prune -f
          echo "✅ Environnement de test nettoyé !"

  # ===================================
  # RÉSUMÉ FINAL
  # ===================================
  summary:
    name: 📊 Résumé du Pipeline
    runs-on: ubuntu-latest
    needs: [validate, build, test, security, integration]
    if: always()
    steps:
      - name: Display Pipeline Results
        run: |
          echo "🎉 Résumé du Pipeline CI/CD:"
          echo "================================"
          echo "🔍 Validation: ${{ needs.validate.result }}"
          echo "🏗️ Build: ${{ needs.build.result }}"
          echo "🧪 Tests: ${{ needs.test.result }}"
          echo "🔄 Intégration: ${{ needs.integration.result }}"
          echo ""
          echo "📦 Registry: ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}"
          echo "🔗 Branch: ${{ github.ref_name }}"
          echo "📝 Commit: ${{ github.sha }}"
          echo ""
          echo "📁 Structure du projet:"
          echo "├── frontend/Dockerfile ✅"
          echo "└── services/"
          echo "    ├── auth-service/Dockerfile ✅"
          echo "    ├── product-service/Dockerfile ✅"
          echo "    └── order-service/Dockerfile ✅"
          echo ""
          if [ "${{ needs.build.result }}" = "success" ] && [ "${{ needs.test.result }}" = "success" ]; then
            echo "🎉 Pipeline terminé avec succès !"
            echo "✅ Toutes les images sont disponibles dans le registry"
          else
            echo "❌ Des problèmes ont été détectés."
            echo "🔍 Consultez les logs ci-dessus pour plus de détails."
          fi