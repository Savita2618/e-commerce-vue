# ===================================
# Pipeline CI/CD Corrig√© - VRAIS TESTS
# ===================================

name: Docker CI/CD avec Tests R√©els

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  PROJECT_NAME: ecommerce-docker-esgi

jobs:
  # ===================================
  # √âTAPE 1 : BUILD
  # ===================================
  build:
    name: üèóÔ∏è Build Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build Images
        run: |
          # Build all services
          docker-compose -f docker-compose.yml build
          
          # Tag images for registry
          docker tag auth-service ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/auth-service:${{ github.sha }}
          docker tag product-service ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/product-service:${{ github.sha }}
          docker tag order-service ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/order-service:${{ github.sha }}
          docker tag frontend ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/frontend:${{ github.sha }}
          
      - name: Push Images
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/auth-service:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/product-service:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/order-service:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/frontend:${{ github.sha }}

  # ===================================
  # √âTAPE 2 : TESTS UNITAIRES
  # ===================================
  unit-tests:
    name: üß™ Tests Unitaires
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Test Auth Service
        run: |
          cd auth-service
          npm install
          npm test
          
      - name: Test Product Service
        run: |
          cd product-service
          npm install
          npm test
          
      - name: Test Order Service
        run: |
          cd order-service
          npm install
          npm test
          
      - name: Test Frontend
        run: |
          cd frontend
          npm install
          npm run test:unit

  # ===================================
  # √âTAPE 3 : TESTS D'INT√âGRATION R√âELS
  # ===================================
  integration-tests:
    name: üîÑ Tests d'Int√©gration R√©els
    runs-on: ubuntu-latest
    needs: [build, unit-tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Pull Built Images
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/auth-service:${{ github.sha }}
          docker pull ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/product-service:${{ github.sha }}
          docker pull ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/order-service:${{ github.sha }}
          docker pull ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/frontend:${{ github.sha }}
          
          # Tag as latest for docker-compose
          docker tag ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/auth-service:${{ github.sha }} auth-service:latest
          docker tag ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/product-service:${{ github.sha }} product-service:latest
          docker tag ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/order-service:${{ github.sha }} order-service:latest
          docker tag ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/frontend:${{ github.sha }} frontend:latest
          
      - name: Start Test Environment
        run: |
          echo "üöÄ Lancement de l'environnement de test..."
          docker-compose -f docker-compose.test.yml up -d
          
          echo "‚è≥ Attente du d√©marrage des services..."
          sleep 60
          
      - name: Wait for Services
        run: |
          echo "üîç V√©rification de l'√©tat des services..."
          docker-compose -f docker-compose.test.yml ps
          
          # Attendre que tous les services soient pr√™ts
          echo "‚è≥ Attente des health checks..."
          timeout 300 bash -c 'until docker-compose -f docker-compose.test.yml ps | grep -q "healthy.*healthy.*healthy"; do sleep 5; done'
          
      - name: Run Integration Tests
        run: |
          echo "üß™ Ex√©cution des tests d'int√©gration..."
          
          # Donner les permissions d'ex√©cution
          chmod +x scripts/test-integration.sh
          
          # Ex√©cuter les tests r√©els
          ./scripts/test-integration.sh
          
      - name: Test Results
        run: |
          echo "üìä R√©sultats des tests..."
          
          # V√©rifier les logs des services
          echo "=== Logs Auth Service ==="
          docker-compose -f docker-compose.test.yml logs auth-service-test | tail -20
          
          echo "=== Logs Product Service ==="
          docker-compose -f docker-compose.test.yml logs product-service-test | tail -20
          
          echo "=== Logs Order Service ==="
          docker-compose -f docker-compose.test.yml logs order-service-test | tail -20
          
      - name: Cleanup Test Environment
        if: always()
        run: |
          echo "üßπ Nettoyage de l'environnement de test..."
          docker-compose -f docker-compose.test.yml down -v
          docker system prune -f

  # ===================================
  # √âTAPE 4 : TESTS E2E (BONUS)
  # ===================================
  e2e-tests:
    name: üé≠ Tests End-to-End
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Start Full Application
        run: |
          docker-compose up -d
          sleep 60
          
      - name: Install Cypress
        run: |
          npm install cypress --save-dev
          
      - name: Run E2E Tests
        run: |
          npx cypress run --config baseUrl=http://localhost:3000
          
      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v

  # ===================================
  # √âTAPE 5 : S√âCURIT√â
  # ===================================
  security-scan:
    name: üîí Scan de S√©curit√©
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/auth-service:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # ===================================
  # √âTAPE 6 : D√âPLOIEMENT
  # ===================================
  deploy:
    name: üöÄ D√©ploiement
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to Production
        run: |
          echo "üöÄ D√©ploiement en production..."
          echo "Images utilis√©es:"
          echo "- ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/auth-service:${{ github.sha }}"
          echo "- ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/product-service:${{ github.sha }}"
          echo "- ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/order-service:${{ github.sha }}"
          echo "- ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}/frontend:${{ github.sha }}"