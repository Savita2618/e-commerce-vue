# ===================================
# GitHub Actions CI/CD - Version DEBUG
# ===================================

name: üöÄ CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Permet d√©clenchement manuel

env:
  REGISTRY: ghcr.io
  PROJECT_NAME: ${{ github.repository }}
  
jobs:
  # ===================================
  # DEBUG & VALIDATION
  # ===================================
  
  debug:
    name: üîç Debug Info
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Debug project structure
        run: |
          echo "=== PROJECT STRUCTURE ==="
          echo "Working directory: $(pwd)"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo ""
          echo "=== FILES CHECK ==="
          echo "Package files:"
          find . -name "package.json" -type f | head -10
          find . -name "package-lock.json" -type f | head -10
          echo ""
          echo "Dockerfiles:"
          find . -name "Dockerfile" -type f | head -10
          echo ""
          echo "=== DOCKER COMPOSE FILES ==="
          ls -la docker-compose*.yml || echo "No docker-compose files"
          echo ""
          echo "=== GITHUB WORKFLOW ==="
          ls -la .github/workflows/ || echo "No workflows directory"

  validate:
    name: üîç Validate
    runs-on: ubuntu-latest
    needs: debug
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate essential files
        run: |
          echo "üîç Checking essential files..."
          
          # Check docker-compose files
          if [ -f "docker-compose.yml" ]; then
            echo "‚úÖ docker-compose.yml found"
          else
            echo "‚ùå docker-compose.yml missing"
            exit 1
          fi
          
          if [ -f "docker-compose.prod.yml" ]; then
            echo "‚úÖ docker-compose.prod.yml found"
          else
            echo "‚ùå docker-compose.prod.yml missing"
            exit 1
          fi
          
          # Check services
          for service in auth-service product-service order-service; do
            if [ -f "services/$service/package.json" ]; then
              echo "‚úÖ services/$service/package.json found"
            else
              echo "‚ùå services/$service/package.json missing"
            fi
            
            if [ -f "services/$service/package-lock.json" ]; then
              echo "‚úÖ services/$service/package-lock.json found"
            else
              echo "‚ùå services/$service/package-lock.json missing"
            fi
            
            if [ -f "services/$service/Dockerfile" ]; then
              echo "‚úÖ services/$service/Dockerfile found"
            else
              echo "‚ùå services/$service/Dockerfile missing"
            fi
          done
          
          # Check frontend
          if [ -f "frontend/package.json" ]; then
            echo "‚úÖ frontend/package.json found"
          else
            echo "‚ùå frontend/package.json missing"
          fi
          
          if [ -f "frontend/package-lock.json" ]; then
            echo "‚úÖ frontend/package-lock.json found"
          else
            echo "‚ùå frontend/package-lock.json missing"
          fi
          
          if [ -f "frontend/Dockerfile" ]; then
            echo "‚úÖ frontend/Dockerfile found"
          else
            echo "‚ùå frontend/Dockerfile missing"
          fi
          
          echo "‚úÖ Validation completed"

  # ===================================
  # BUILD TEST (Un seul service d'abord)
  # ===================================

  build-test:
    name: üèóÔ∏è Build Test (Auth Service Only)
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Test auth-service build
        run: |
          echo "üèóÔ∏è Testing auth-service build..."
          cd services/auth-service
          
          echo "Package.json content:"
          cat package.json | head -20
          
          echo "Package-lock.json exists:"
          ls -la package-lock.json
          
          echo "Dockerfile content:"
          cat Dockerfile | head -20
          
          echo "Building Docker image..."
          docker build --target development -t test-auth .
          
          echo "‚úÖ Auth service build successful"

  # ===================================
  # TESTS SIMPLES
  # ===================================

  test-simple:
    name: üß™ Simple Tests
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      fail-fast: false
      matrix:
        service: [auth-service, product-service, order-service, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Test ${{ matrix.service }}
        run: |
          if [ "${{ matrix.service }}" = "frontend" ]; then
            WORKDIR="./frontend"
          else
            WORKDIR="./services/${{ matrix.service }}"
          fi
          
          echo "Testing ${{ matrix.service }} in $WORKDIR"
          
          if [ -f "$WORKDIR/package.json" ]; then
            echo "‚úÖ package.json found"
            cd $WORKDIR
            
            echo "Installing dependencies..."
            npm install --prefer-offline --no-audit
            
            echo "Running tests..."
            if [ "${{ matrix.service }}" = "frontend" ]; then
              npm run test:unit || echo "No tests configured for frontend"
            else
              npm test || echo "No tests configured for ${{ matrix.service }}"
            fi
            
            echo "‚úÖ ${{ matrix.service }} tests completed"
          else
            echo "‚ùå package.json not found for ${{ matrix.service }}"
            exit 1
          fi

  # ===================================
  # SUMMARY
  # ===================================

  summary:
    name: üìä Summary
    runs-on: ubuntu-latest
    needs: [debug, validate, build-test, test-simple]
    if: always()
    steps:
      - name: Display results
        run: |
          echo "üéâ Pipeline Summary:"
          echo "‚úÖ Debug: ${{ needs.debug.result }}"
          echo "‚úÖ Validate: ${{ needs.validate.result }}"
          echo "‚úÖ Build Test: ${{ needs.build-test.result }}"
          echo "‚úÖ Tests: ${{ needs.test-simple.result }}"
          echo ""
          if [ "${{ needs.build-test.result }}" = "success" ]; then
            echo "üéâ Build is working! Ready for full pipeline."
          else
            echo "‚ùå Build issues detected. Check logs above."
          fi