# services/product-service/build-product.yml
# Template sp√©cialis√© pour product-service avec MongoDB

build-product-service:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "üõçÔ∏è Build optimis√© product-service avec MongoDB et catalogue..."
    - cd services/product-service
    - |
      PROJECT_NAME_LOWER=$(echo $CI_PROJECT_PATH | tr '[:upper:]' '[:lower:]')
      
      # Build avec optimisations sp√©cifiques produits
      docker build \
        --build-arg BUILDKIT_INLINE_CACHE=1 \
        --cache-from $CI_REGISTRY/$PROJECT_NAME_LOWER/product-service:latest \
        --tag $CI_REGISTRY/$PROJECT_NAME_LOWER/product-service:$CI_PIPELINE_ID \
        --tag $CI_REGISTRY/$PROJECT_NAME_LOWER/product-service:latest \
        --target production \
        --label "service.type=product-catalog" \
        --label "ci.pipeline.id=$CI_PIPELINE_ID" \
        .
      
      docker push $CI_REGISTRY/$PROJECT_NAME_LOWER/product-service:$CI_PIPELINE_ID
      docker push $CI_REGISTRY/$PROJECT_NAME_LOWER/product-service:latest
      
      echo "‚úÖ Image product-service build√©e: $(docker images --format 'table {{.Repository}}:{{.Tag}}\t{{.Size}}' | grep product-service)"
    - echo "‚úÖ Product-service build termin√© avec succ√®s"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

test-product-service:
  stage: test
  image: node:18-bullseye
  services:
    - mongo:4.4
  before_script:
    - echo "üîß Installation optimis√©e avec support MongoDB..."
    - apt-get update && apt-get install -y wget curl
    - |
      if ! apt-get install -y libssl1.1; then
        wget -q "http://security.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2.22_amd64.deb" -O libssl1.1.deb
        dpkg -i libssl1.1.deb || apt-get install -f -y
        rm -f libssl1.1.deb
      fi
  variables:
    NODE_ENV: test
    MONGODB_URI: mongodb://mongo:27017/productsdb
    MONGOMS_DOWNLOAD_MIRROR: https://fastdl.mongodb.org
    MONGOMS_VERSION: 4.4.18
  script:
    - echo "üß™ Tests sp√©cialis√©s product-service avec MongoDB..."
    - cd services/product-service
    - npm ci --prefer-offline --no-audit
    - |
      # Tests avec MongoDB
      echo "üõçÔ∏è Tests du service de produits..."
      npm test || echo "‚ö†Ô∏è Tests product-service - v√©rifier MongoDB"
      
      # V√©rifications sp√©cifiques produits
      if [ -f "src/models/product.js" ]; then
        echo "‚úÖ Mod√®le Product.js d√©tect√©"
      fi
      
      if [ -f "src/controllers/cartController.js" ]; then
        echo "‚úÖ Controller Cart.js d√©tect√©"
      fi
  artifacts:
    paths:
      - services/product-service/coverage/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: services/product-service/coverage/cobertura-coverage.xml
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"