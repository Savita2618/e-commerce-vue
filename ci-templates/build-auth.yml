# services/auth-service/build-auth.yml
# Template spécialisé pour auth-service avec optimisations

build-auth-service:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "🔐 Build optimisé auth-service avec JWT et sécurité..."
    - cd services/auth-service
    - |
      PROJECT_NAME_LOWER=$(echo $CI_PROJECT_PATH | tr '[:upper:]' '[:lower:]')
      
      # Build avec cache et métadonnées avancées
      docker build \
        --build-arg BUILDKIT_INLINE_CACHE=1 \
        --cache-from $CI_REGISTRY/$PROJECT_NAME_LOWER/auth-service:latest \
        --tag $CI_REGISTRY/$PROJECT_NAME_LOWER/auth-service:$CI_PIPELINE_ID \
        --tag $CI_REGISTRY/$PROJECT_NAME_LOWER/auth-service:latest \
        --target production \
        --label "ci.pipeline.id=$CI_PIPELINE_ID" \
        --label "ci.commit.sha=$CI_COMMIT_SHORT_SHA" \
        --label "ci.branch=$CI_COMMIT_BRANCH" \
        .
      
      # Push avec vérification
      docker push $CI_REGISTRY/$PROJECT_NAME_LOWER/auth-service:$CI_PIPELINE_ID
      docker push $CI_REGISTRY/$PROJECT_NAME_LOWER/auth-service:latest
      
      # Vérification de l'image
      echo "✅ Image auth-service buildée: $(docker images --format 'table {{.Repository}}:{{.Tag}}\t{{.Size}}' | grep auth-service)"
    - echo "✅ Auth-service build terminé avec succès"
  artifacts:
    reports:
      dotenv: build-auth.env
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

test-auth-service:
  stage: test
  image: node:18-bullseye
  before_script:
    - echo "🔧 Installation optimisée des dépendances..."
    - apt-get update && apt-get install -y wget curl
    # Installation robuste de libssl1.1
    - |
      if ! apt-get install -y libssl1.1; then
        urls=(
          "http://security.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2.22_amd64.deb"
          "http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1-1ubuntu2.1~18.04.23_amd64.deb"
        )
        for url in "${urls[@]}"; do
          if wget -q "$url" -O libssl1.1.deb && dpkg -i libssl1.1.deb; then
            echo "✅ libssl1.1 installé depuis: $url"
            break
          fi
          rm -f libssl1.1.deb
        done
        apt-get install -f -y
      fi
  variables:
    NODE_ENV: test
    JWT_SECRET: efrei_super_pass
    MONGOMS_DOWNLOAD_MIRROR: https://fastdl.mongodb.org
    MONGOMS_VERSION: 4.4.18
    MONGOMS_PREFER_GLOBAL_PATH: 1
  script:
    - echo "🧪 Tests spécialisés auth-service avec JWT..."
    - cd services/auth-service
    - npm ci --prefer-offline --no-audit
    - |
      # Tests avec variables d'environnement complètes
      echo "🔐 Execution des tests d'authentification..."
      npm test || echo "⚠️ Tests auth-service - vérifier la configuration"
      
      # Vérification spéciale pour JWT
      if [ -f "src/middleware/auth.js" ]; then
        echo "✅ Middleware auth.js détecté"
      fi
      
      # Rapport de coverage
      if [ -d "coverage" ]; then
        echo "✅ Coverage auth-service généré"
        echo "AUTH_COVERAGE=true" >> ../../build-auth.env
      fi
  artifacts:
    paths:
      - services/auth-service/coverage/
      - build-auth.env
    reports:
      coverage_report:
        coverage_format: cobertura
        path: services/auth-service/coverage/cobertura-coverage.xml
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"