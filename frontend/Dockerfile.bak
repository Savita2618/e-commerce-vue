# ===================================
# Dockerfile - Frontend Vue.js CORRIGÉ
# Multi-stage build : Dev et Production
# ===================================

# Stage 1: Build stage
FROM node:18-alpine AS build-stage

# Définir les arguments de build
ARG NODE_ENV=production
ARG VITE_AUTH_SERVICE_URL
ARG VITE_PRODUCT_SERVICE_URL
ARG VITE_ORDER_SERVICE_URL

# Définir le répertoire de travail
WORKDIR /app

# Copier les fichiers de configuration des dépendances
COPY package*.json ./
COPY vitest.config.js ./
COPY vite.config.js ./

# Installer les dépendances
RUN npm ci --only=production && \
    npm cache clean --force

# Copier le code source
COPY . .

# Construire l'application
RUN npm run build

# ===================================
# Stage 2: Development stage (CORRIGÉ)
# ===================================
FROM node:18-alpine AS development

# Installer des outils de debug
RUN apk add --no-cache curl netcat-openbsd

WORKDIR /app

# Copier les fichiers de configuration
COPY package*.json ./
COPY vitest.config.js ./
COPY vite.config.js ./

# Installer toutes les dépendances (dev + prod)
RUN npm ci && npm cache clean --force

# Copier le code source
COPY . .

# IMPORTANT : Utiliser root en développement pour éviter les problèmes de permissions
# En production, on utilisera un utilisateur non-root dans le stage production
USER root

# Exposer le port
EXPOSE 8080

# Configuration Vite pour accepter les connexions externes
ENV HOST=0.0.0.0
ENV PORT=8080

# Healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:8080 || exit 1

# Commande pour le développement
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0", "--port", "8080"]

# ===================================
# Stage 3: Production stage (Sécurisé)
# ===================================
FROM nginx:alpine AS production

# Installer Node.js pour le serveur proxy
RUN apk add --no-cache nodejs npm

# Créer un utilisateur non-root pour la production
RUN addgroup -g 1001 -S appgroup && \
    adduser -S appuser -u 1001 -G appgroup

# Copier les fichiers construits depuis le build stage
COPY --from=build-stage /app/dist /usr/share/nginx/html

# Copier le serveur proxy pour la production
COPY --from=build-stage /app/server.cjs /app/server.cjs
COPY --from=build-stage /app/package*.json /app/

# Installer les dépendances du serveur
WORKDIR /app
RUN npm ci --only=production && npm cache clean --force

# Copier la configuration nginx personnalisée
COPY nginx.conf /etc/nginx/nginx.conf

# Créer les répertoires nécessaires avec les bonnes permissions
RUN mkdir -p /var/cache/nginx /var/run && \
    chown -R appuser:appgroup /var/cache/nginx /var/run /usr/share/nginx/html /app

# Changer vers l'utilisateur non-root SEULEMENT en production
USER appuser

# Exposer le port
EXPOSE 8080

# Healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080 || exit 1

# Commande pour la production (serveur Node.js avec proxy)
CMD ["node", "server.cjs"]