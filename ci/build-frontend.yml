# ===================================
# Template Build - Frontend Vue.js (GitLab)
# Adapté depuis ton code + améliorations
# ===================================

build-frontend:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  variables:
    SERVICE_NAME: frontend
    SERVICE_PATH: frontend
    DOCKERFILE_PATH: frontend/Dockerfile
    # Variables d'environnement pour le build Vue.js (tes variables)
    VITE_AUTH_SERVICE_URL: /api/auth
    VITE_PRODUCT_SERVICE_URL: /api/products
    VITE_ORDER_SERVICE_URL: /api/orders
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - PROJECT_NAME_LOWER=$(echo $CI_PROJECT_PATH | tr '[:upper:]' '[:lower:]')
    - echo "🌐 === BUILD FRONTEND VUE.JS ==="
    - echo "Variables d'environnement:"
    - echo "- Image: $CI_REGISTRY/$PROJECT_NAME_LOWER/$SERVICE_NAME:$CI_PIPELINE_ID"
    - echo "- Registry: $CI_REGISTRY"
    - echo "- Branch: $CI_COMMIT_BRANCH"
    - echo "- Commit: $CI_COMMIT_SHORT_SHA"
    - echo "- Auth URL: $VITE_AUTH_SERVICE_URL"
    - echo "- Product URL: $VITE_PRODUCT_SERVICE_URL"
    - echo "- Order URL: $VITE_ORDER_SERVICE_URL"
  script:
    - echo "🖥️ Build optimisé frontend Vue.js avec Nginx et PWA..."
    - cd frontend
    - |
      # Build avec optimisations frontend avancées (adapté de ton code)
      docker build \
        --build-arg BUILDKIT_INLINE_CACHE=1 \
        --build-arg VITE_AUTH_SERVICE_URL=$VITE_AUTH_SERVICE_URL \
        --build-arg VITE_PRODUCT_SERVICE_URL=$VITE_PRODUCT_SERVICE_URL \
        --build-arg VITE_ORDER_SERVICE_URL=$VITE_ORDER_SERVICE_URL \
        --cache-from $CI_REGISTRY/$PROJECT_NAME_LOWER/frontend:latest \
        --tag $CI_REGISTRY/$PROJECT_NAME_LOWER/frontend:$CI_PIPELINE_ID \
        --tag $CI_REGISTRY/$PROJECT_NAME_LOWER/frontend:latest \
        --target production \
        --label "service.type=frontend-web" \
        --label "framework=vue.js" \
        --label "server=nginx" \
        --label "ci.pipeline.id=$CI_PIPELINE_ID" \
        --label "ci.commit.sha=$CI_COMMIT_SHORT_SHA" \
        --label "ci.branch=$CI_COMMIT_BRANCH" \
        --label "project=esgi-ecommerce" \
        .
    
    - docker push $CI_REGISTRY/$PROJECT_NAME_LOWER/frontend:$CI_PIPELINE_ID
    - docker push $CI_REGISTRY/$PROJECT_NAME_LOWER/frontend:latest
    
    - echo "✅ Image frontend buildée: $(docker images --format 'table {{.Repository}}:{{.Tag}}\t{{.Size}}' | grep frontend)"
    
    # Test rapide de l'image (nginx)
    - |
      echo "🧪 Test rapide de l'image..."
      docker run --rm --name frontend-test-build \
        -p 8080:8080 \
        -d $CI_REGISTRY/$PROJECT_NAME_LOWER/frontend:$CI_PIPELINE_ID
      sleep 10
      # Test simple que nginx démarre
      if docker ps | grep frontend-test-build; then
        echo "✅ Image Frontend fonctionnelle (Nginx démarré)"
        docker stop frontend-test-build
      else
        echo "❌ Problème avec l'image Frontend"
        docker logs frontend-test-build
        exit 1
      fi
    
    - echo "✅ Frontend build terminé avec succès"
  after_script:
    - docker system prune -f
    - docker stop frontend-test-build 2>/dev/null || true
  cache:
    key: $CI_COMMIT_REF_SLUG-frontend
    paths:
      - .docker/
      - frontend/node_modules/
  artifacts:
    when: always
    paths:
      - frontend/package.json
      - frontend/vite.config.js
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"