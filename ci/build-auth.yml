# ===================================
# Template Build - Auth Service (GitLab)
# Adapt√© depuis ton code + am√©liorations
# ===================================

build-auth-service:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  variables:
    SERVICE_NAME: auth-service
    SERVICE_PATH: services/auth-service
    DOCKERFILE_PATH: services/auth-service/Dockerfile
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - PROJECT_NAME_LOWER=$(echo $CI_PROJECT_PATH | tr '[:upper:]' '[:lower:]')
    - echo "üîê === BUILD AUTH SERVICE ==="
    - echo "Variables d'environnement:"
    - echo "- Image: $CI_REGISTRY/$PROJECT_NAME_LOWER/$SERVICE_NAME:$CI_PIPELINE_ID"
    - echo "- Registry: $CI_REGISTRY"
    - echo "- Branch: $CI_COMMIT_BRANCH"
    - echo "- Commit: $CI_COMMIT_SHORT_SHA"
  script:
    - echo "üîê Build optimis√© auth-service avec JWT et s√©curit√©..."
    - cd services/auth-service
    - |
      # Build avec cache et m√©tadonn√©es avanc√©es (adapt√© de ton code)
      docker build \
        --build-arg BUILDKIT_INLINE_CACHE=1 \
        --cache-from $CI_REGISTRY/$PROJECT_NAME_LOWER/auth-service:latest \
        --tag $CI_REGISTRY/$PROJECT_NAME_LOWER/auth-service:$CI_PIPELINE_ID \
        --tag $CI_REGISTRY/$PROJECT_NAME_LOWER/auth-service:latest \
        --target production \
        --label "ci.pipeline.id=$CI_PIPELINE_ID" \
        --label "ci.commit.sha=$CI_COMMIT_SHORT_SHA" \
        --label "ci.branch=$CI_COMMIT_BRANCH" \
        --label "service.type=authentication" \
        --label "project=esgi-ecommerce" \
        .
    
    # Push avec v√©rification (comme ton code GitHub Actions)
    - docker push $CI_REGISTRY/$PROJECT_NAME_LOWER/auth-service:$CI_PIPELINE_ID
    - docker push $CI_REGISTRY/$PROJECT_NAME_LOWER/auth-service:latest
    
    # V√©rification de l'image (ton am√©lioration)
    - echo "‚úÖ Image auth-service build√©e: $(docker images --format 'table {{.Repository}}:{{.Tag}}\t{{.Size}}' | grep auth-service)"
    
    # Test rapide de l'image
    - |
      echo "üß™ Test rapide de l'image..."
      docker run --rm --name auth-test-build \
        -e NODE_ENV=test \
        -e PORT=3001 \
        $CI_REGISTRY/$PROJECT_NAME_LOWER/auth-service:$CI_PIPELINE_ID \
        node --version && echo "‚úÖ Image Auth Service fonctionnelle"
    
    - echo "‚úÖ Auth-service build termin√© avec succ√®s"
  after_script:
    - docker system prune -f
  cache:
    key: $CI_COMMIT_REF_SLUG-auth
    paths:
      - .docker/
  artifacts:
    when: always
    paths:
      - services/auth-service/package.json
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"