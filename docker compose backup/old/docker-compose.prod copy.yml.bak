# ===================================
# Docker Compose - Production (sans health checks)
# Version de debug pour identifier le problème
# ===================================

services:
  # ===================================
  # BASES DE DONNÉES
  # ===================================
  
  mongodb-auth:
    image: mongo:4.4
    container_name: mongodb-auth-prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-production_password_12345}
      MONGO_INITDB_DATABASE: authdb
    volumes:
      - mongodb_auth_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ecommerce-network

  mongodb-products:
    image: mongo:4.4
    container_name: mongodb-products-prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-production_password_12345}
      MONGO_INITDB_DATABASE: productsdb
    volumes:
      - mongodb_products_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ecommerce-network

  mongodb-orders:
    image: mongo:4.4
    container_name: mongodb-orders-prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-production_password_12345}
      MONGO_INITDB_DATABASE: ordersdb
    volumes:
      - mongodb_orders_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ecommerce-network

  # ===================================
  # MICROSERVICES BACKEND - SANS HEALTH CHECKS
  # ===================================

  auth-service:
    image: ghcr.io/savita2618/e-commerce-vue/auth-service:${IMAGE_TAG:-latest}
    container_name: auth-service-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-production_password_12345}@mongodb-auth:27017/authdb?authSource=admin
      JWT_SECRET: ${JWT_SECRET:-efrei_super_pass_production_secret}
      CORS_ORIGIN: http://localhost:8080
    ports:
      - "3001:3001"
    networks:
      - ecommerce-network
    depends_on:
      - mongodb-auth

  product-service:
    image: ghcr.io/savita2618/e-commerce-vue/product-service:${IMAGE_TAG:-latest}
    container_name: product-service-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-production_password_12345}@mongodb-products:27017/productsdb?authSource=admin
      JWT_SECRET: ${JWT_SECRET:-efrei_super_pass_production_secret}
      CORS_ORIGIN: http://localhost:8080
    ports:
      - "3000:3000"
    networks:
      - ecommerce-network
    depends_on:
      - mongodb-products

  order-service:
    image: ghcr.io/savita2618/e-commerce-vue/order-service:${IMAGE_TAG:-latest}
    container_name: order-service-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3002
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-production_password_12345}@mongodb-orders:27017/ordersdb?authSource=admin
      JWT_SECRET: ${JWT_SECRET:-efrei_super_pass_production_secret}
      PRODUCT_SERVICE_URL: http://product-service:3000
      CORS_ORIGIN: http://localhost:8080
    ports:
      - "3002:3002"
    networks:
      - ecommerce-network
    depends_on:
      - mongodb-orders
      - product-service

  # ===================================
  # FRONTEND
  # ===================================

  frontend:
    image: ghcr.io/savita2618/e-commerce-vue/frontend:${IMAGE_TAG:-latest}
    container_name: frontend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      VITE_AUTH_SERVICE_URL: /api/auth
      VITE_PRODUCT_SERVICE_URL: /api/products
      VITE_ORDER_SERVICE_URL: /api/orders
    ports:
      - "8080:8080"
    networks:
      - ecommerce-network
    depends_on:
      - auth-service
      - product-service
      - order-service

  # ===================================
  # REVERSE PROXY NGINX (utilise ta config existante)
  # ===================================

  nginx-proxy:
    image: nginx:alpine
    container_name: nginx-proxy-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - ecommerce-network
    depends_on:
      - frontend
      - auth-service
      - product-service
      - order-service

# ===================================
# RÉSEAUX
# ===================================

networks:
  ecommerce-network:
    driver: bridge

# ===================================
# VOLUMES
# ===================================

volumes:
  mongodb_auth_data:
    driver: local
  mongodb_products_data:
    driver: local
  mongodb_orders_data:
    driver: local