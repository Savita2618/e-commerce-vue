variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - validate
  - build
  - test

validate:
  stage: validate
  image: alpine:latest
  script:
    - echo "Validation de la structure du projet"
    - test -f docker-compose.yml && echo "docker-compose.yml OK" || exit 1
    - test -f docker-compose.prod.yml && echo "docker-compose.prod.yml OK" || exit 1
    - test -f "services/auth-service/package.json" && echo "auth-service OK" || exit 1
    - test -f "services/product-service/package.json" && echo "product-service OK" || exit 1
    - test -f "services/order-service/package.json" && echo "order-service OK" || exit 1
    - test -f "frontend/package.json" && echo "frontend OK" || exit 1
    - echo "Structure validee avec succes"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"

build-auth:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "Build auth-service"
    - cd services/auth-service
    - docker build -t $CI_REGISTRY_IMAGE/auth-service:$CI_PIPELINE_ID -t $CI_REGISTRY_IMAGE/auth-service:latest .
    - docker push $CI_REGISTRY_IMAGE/auth-service:$CI_PIPELINE_ID
    - docker push $CI_REGISTRY_IMAGE/auth-service:latest
    - echo "Auth-service build termine"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

build-product:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "Build product-service"
    - cd services/product-service
    - docker build -t $CI_REGISTRY_IMAGE/product-service:$CI_PIPELINE_ID -t $CI_REGISTRY_IMAGE/product-service:latest .
    - docker push $CI_REGISTRY_IMAGE/product-service:$CI_PIPELINE_ID
    - docker push $CI_REGISTRY_IMAGE/product-service:latest
    - echo "Product-service build termine"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

build-order:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "Build order-service"
    - cd services/order-service
    - docker build -t $CI_REGISTRY_IMAGE/order-service:$CI_PIPELINE_ID -t $CI_REGISTRY_IMAGE/order-service:latest .
    - docker push $CI_REGISTRY_IMAGE/order-service:$CI_PIPELINE_ID
    - docker push $CI_REGISTRY_IMAGE/order-service:latest
    - echo "Order-service build termine"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

build-frontend:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "Build frontend"
    - cd frontend
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$CI_PIPELINE_ID -t $CI_REGISTRY_IMAGE/frontend:latest .
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_PIPELINE_ID
    - docker push $CI_REGISTRY_IMAGE/frontend:latest
    - echo "Frontend build termine"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

test-auth:
  stage: test
  image: node:18-bullseye
  before_script:
    - apt-get update
    - apt-get install -y wget
    - wget -q "http://security.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2.22_amd64.deb"
    - dpkg -i libssl1.1_1.1.1f-1ubuntu2.22_amd64.deb || apt-get install -f -y
  variables:
    NODE_ENV: test
    JWT_SECRET: efrei_super_pass
  script:
    - echo "Tests auth-service"
    - cd services/auth-service
    - npm ci --prefer-offline
    - npm test || echo "Tests auth termines"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

test-product:
  stage: test
  image: node:18-bullseye
  services:
    - mongo:4.4
  before_script:
    - apt-get update
    - apt-get install -y wget
    - wget -q "http://security.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2.22_amd64.deb"
    - dpkg -i libssl1.1_1.1.1f-1ubuntu2.22_amd64.deb || apt-get install -f -y
  variables:
    NODE_ENV: test
    MONGODB_URI: mongodb://mongo:27017/productsdb
  script:
    - echo "Tests product-service"
    - cd services/product-service
    - npm ci --prefer-offline
    - npm test || echo "Tests product termines"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

test-order:
  stage: test
  image: node:18-bullseye
  services:
    - mongo:4.4
  variables:
    NODE_ENV: test
    MONGODB_URI: mongodb://mongo:27017/ordersdb
  script:
    - echo "Tests order-service"
    - cd services/order-service
    - npm ci --prefer-offline || echo "npm ci failed"
    - npm test || echo "Tests order termines"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

test-frontend:
  stage: test
  image: node:18-bullseye
  variables:
    NODE_ENV: test
  script:
    - echo "Tests frontend"
    - cd frontend
    - npm ci --prefer-offline || echo "npm ci failed"
    - npm run test:unit || npm run test || echo "Tests frontend termines"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"