# =============================================================================
# docker-compose.prod.yml - Environnement de Production
# =============================================================================

---
version: '3.8'

# Réseau sécurisé pour la production
networks:
  ecommerce-prod-network:
    driver: overlay
    attachable: true
    encrypted: true

# Volumes pour la production avec pilotes optimisés
volumes:
  mongodb_prod_data:
    driver: local
  nginx_cache:
    driver: local

# Secrets Docker pour les données sensibles
secrets:
  mongodb_root_password:
    external: true
  jwt_secret:
    external: true
  mongodb_auth_uri:
    external: true
  mongodb_product_uri:
    external: true
  mongodb_order_uri:
    external: true

services:
  # =============================================================================
  # MONGODB PRODUCTION AVEC REPLICA SET
  # =============================================================================
  mongodb:
    image: mongo:7.0
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongodb_root_password
      MONGO_INITDB_DATABASE: ecommerce
    volumes:
      - mongodb_prod_data:/data/db
      - ./scripts/mongo-init-prod.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    secrets:
      - mongodb_root_password
    networks:
      - ecommerce-prod-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # AUTH SERVICE PRODUCTION
  # =============================================================================
  auth-service:
    image: ecommerce/auth-service:latest
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
      target: production
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
      update_config:
        parallelism: 1
        delay: 10s
    environment:
      NODE_ENV: production
      PORT: 3001
    secrets:
      - mongodb_auth_uri
      - jwt_secret
    depends_on:
      - mongodb
    networks:
      - ecommerce-prod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 60s
      timeout: 10s
      retries: 3

  # =============================================================================
  # PRODUCT SERVICE PRODUCTION
  # =============================================================================
  product-service:
    image: ecommerce/product-service:latest
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
      target: production
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    environment:
      NODE_ENV: production
      PORT: 3000
      AUTH_SERVICE_URL: http://auth-service:3001
    secrets:
      - mongodb_product_uri
    depends_on:
      - mongodb
      - auth-service
    networks:
      - ecommerce-prod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 60s
      timeout: 10s
      retries: 3

  # =============================================================================
  # ORDER SERVICE PRODUCTION
  # =============================================================================
  order-service:
    image: ecommerce/order-service:latest
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
      target: production
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    environment:
      NODE_ENV: production
      PORT: 3002
      AUTH_SERVICE_URL: http://auth-service:3001
      PRODUCT_SERVICE_URL: http://product-service:3000
    secrets:
      - mongodb_order_uri
    depends_on:
      - mongodb
      - auth-service
      - product-service
    networks:
      - ecommerce-prod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/health"]
      interval: 60s
      timeout: 10s
      retries: 3

  # =============================================================================
  # FRONTEND PRODUCTION AVEC NGINX
  # =============================================================================
  frontend:
    image: ecommerce/frontend:latest
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'
    ports:
      - "80:8080"
      - "443:8080"
    depends_on:
      - auth-service
      - product-service
      - order-service
    networks:
      - ecommerce-prod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 10s
      retries: 3

  # =============================================================================
  # LOAD BALANCER NGINX (OPTIONNEL)
  # =============================================================================
  nginx-lb:
    image: nginx:1.25-alpine
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_cache:/var/cache/nginx
    ports:
      - "8080:80"
    depends_on:
      - frontend
    networks:
      - ecommerce-prod-network