# ===================================
# Docker Compose - Environnement de Production
# CORRECTIONS MINIMALES SEULEMENT
# ===================================

version: '3.8'

services:
  # ===================================
  # BASES DE DONNÉES (OK - pas de changement)
  # ===================================
  
  mongodb-auth:
    image: mongo:4.4
    container_name: mongodb-auth-prod
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME_FILE: /run/secrets/mongo_root_username
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongo_root_password
      MONGO_INITDB_DATABASE: authdb
    volumes:
      - mongodb_auth_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ecommerce-network
    secrets:
      - mongo_root_username
      - mongo_root_password
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  mongodb-products:
    image: mongo:4.4
    container_name: mongodb-products-prod
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME_FILE: /run/secrets/mongo_root_username
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongo_root_password
      MONGO_INITDB_DATABASE: productsdb
    volumes:
      - mongodb_products_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ecommerce-network
    secrets:
      - mongo_root_username
      - mongo_root_password
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  mongodb-orders:
    image: mongo:4.4
    container_name: mongodb-orders-prod
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME_FILE: /run/secrets/mongo_root_username
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongo_root_password
      MONGO_INITDB_DATABASE: ordersdb
    volumes:
      - mongodb_orders_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ecommerce-network
    secrets:
      - mongo_root_username
      - mongo_root_password
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # ===================================
  # MICROSERVICES BACKEND
  # SEULE CORRECTION : Ajouter les ports
  # ===================================

  auth-service:
    image: ghcr.io/${GITHUB_REPOSITORY}/auth-service:${IMAGE_TAG:-latest}
    container_name: auth-service-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3001
      MONGODB_URI: mongodb://mongodb-auth:27017/authdb
      JWT_SECRET_FILE: /run/secrets/jwt_secret
    # CORRECTION 1 : Ajouter les ports manquants
    ports:
      - "3001:3001"
    networks:
      - ecommerce-network
    secrets:
      - jwt_secret
    depends_on:
      mongodb-auth:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  product-service:
    image: ghcr.io/${GITHUB_REPOSITORY}/product-service:${IMAGE_TAG:-latest}
    container_name: product-service-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://mongodb-products:27017/productsdb
      JWT_SECRET_FILE: /run/secrets/jwt_secret
    # CORRECTION 2 : Ajouter les ports manquants
    ports:
      - "3000:3000"
    networks:
      - ecommerce-network
    secrets:
      - jwt_secret
    depends_on:
      mongodb-products:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  order-service:
    image: ghcr.io/${GITHUB_REPOSITORY}/order-service:${IMAGE_TAG:-latest}
    container_name: order-service-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3002
      MONGODB_URI: mongodb://mongodb-orders:27017/ordersdb
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      VITE_PRODUCT_SERVICE_URL: http://product-service:3000
    # CORRECTION 3 : Ajouter les ports manquants
    ports:
      - "3002:3002"
    networks:
      - ecommerce-network
    secrets:
      - jwt_secret
    depends_on:
      mongodb-orders:
        condition: service_healthy
      product-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # ===================================
  # FRONTEND ET LOAD BALANCER (OK - garde tes URLs)
  # ===================================

  frontend:
    image: ghcr.io/${GITHUB_REPOSITORY}/frontend:${IMAGE_TAG:-latest}
    container_name: frontend-prod
    restart: always
    environment:
      NODE_ENV: production
      VITE_AUTH_SERVICE_URL: http://auth-service:3001
      VITE_PRODUCT_SERVICE_URL: http://product-service:3000
      VITE_ORDER_SERVICE_URL: http://order-service:3002
    ports:
      - "8080:8080"
    networks:
      - ecommerce-network
    depends_on:
      auth-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # ===================================
  # MONITORING (OPTIONNEL - pas de changement)
  # ===================================

  nginx-proxy:
    image: nginx:alpine
    container_name: nginx-proxy-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - ecommerce-network
    depends_on:
      - frontend
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

# ===================================
# RÉSEAUX (OK - pas de changement)
# ===================================

networks:
  ecommerce-network:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===================================
# VOLUMES (OK - pas de changement)
# ===================================

volumes:
  mongodb_auth_data:
    driver: local
  mongodb_products_data:
    driver: local
  mongodb_orders_data:
    driver: local

# ===================================
# SECRETS (OK - pas de changement)
# ===================================

secrets:
  jwt_secret:
    external: true
  mongo_root_username:
    external: true
  mongo_root_password:
    external: true