# ===================================
# Docker Compose - Tests d'intégration
# ===================================

version: '3.8'

services:
  # ===================================
  # BASES DE DONNÉES POUR TESTS
  # ===================================
  
  mongodb-auth-test:
    image: mongo:4.4
    container_name: mongodb-auth-test
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: authdb_test
    tmpfs:
      - /data/db
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb-products-test:
    image: mongo:4.4
    container_name: mongodb-products-test
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: productsdb_test
    tmpfs:
      - /data/db
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb-orders-test:
    image: mongo:4.4
    container_name: mongodb-orders-test
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: ordersdb_test
    tmpfs:
      - /data/db
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===================================
  # MICROSERVICES POUR TESTS
  # ===================================

  auth-service:
    image: ${REGISTRY}/${PROJECT_NAME}/auth-service:${IMAGE_TAG:-latest}
    container_name: auth-service-test
    environment:
      NODE_ENV: test
      PORT: 3001
      MONGODB_URI: mongodb://admin:password@mongodb-auth-test:27017/authdb_test?authSource=admin
      JWT_SECRET: test_secret_key
    networks:
      - test-network
    depends_on:
      mongodb-auth-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  product-service:
    image: ${REGISTRY}/${PROJECT_NAME}/product-service:${IMAGE_TAG:-latest}
    container_name: product-service-test
    environment:
      NODE_ENV: test
      PORT: 3000
      MONGODB_URI: mongodb://admin:password@mongodb-products-test:27017/productsdb_test?authSource=admin
      JWT_SECRET: test_secret_key
    networks:
      - test-network
    depends_on:
      mongodb-products-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  order-service:
    image: ${REGISTRY}/${PROJECT_NAME}/order-service:${IMAGE_TAG:-latest}
    container_name: order-service-test
    environment:
      NODE_ENV: test
      PORT: 3002
      MONGODB_URI: mongodb://admin:password@mongodb-orders-test:27017/ordersdb_test?authSource=admin
      JWT_SECRET: test_secret_key
      VITE_PRODUCT_SERVICE_URL: http://product-service:3000
    networks:
      - test-network
    depends_on:
      mongodb-orders-test:
        condition: service_healthy
      product-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===================================
  # FRONTEND POUR TESTS
  # ===================================

  frontend:
    image: ${REGISTRY}/${PROJECT_NAME}/frontend:${IMAGE_TAG:-latest}
    container_name: frontend-test
    environment:
      NODE_ENV: test
      VITE_AUTH_SERVICE_URL: http://auth-service:3001
      VITE_PRODUCT_SERVICE_URL: http://product-service:3000
      VITE_ORDER_SERVICE_URL: http://order-service:3002
    ports:
      - "8080:8080"
    networks:
      - test-network
    depends_on:
      auth-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      order-service:
        condition: service_healthy

  # ===================================
  # SERVICE DE TESTS
  # ===================================

  test-runner:
    image: postman/newman:alpine
    container_name: test-runner
    volumes:
      - ./tests/postman:/etc/newman
    networks:
      - test-network
    depends_on:
      - frontend
      - auth-service
      - product-service
      - order-service
    command: |
      sh -c "
        sleep 30 &&
        newman run /etc/newman/e-commerce-api.postman_collection.json \
          --environment /etc/newman/test.postman_environment.json \
          --reporters cli,junit \
          --reporter-junit-export /etc/newman/results.xml
      "

# ===================================
# RÉSEAUX
# ===================================

networks:
  test-network:
    driver: bridge